@use 'sass:color';
@use 'sass:math';
@use 'sass:list';

@function pow($number, $exponent) {
    $value: 1;
  
    @if $exponent > 0 {
      @for $i from 1 through $exponent {
        $value: $value * $number;
      }
    }
  
    @return $value;
  }

  @function reverse($list, $separator: auto) {
    // not a list: just a value
    @if not is-list($list) {
        @return $list;
    }
    // choose separator for the reversed list
    // user preference is the highest, then the original separator, lastly space
    @if not has($separator, (space comma)) {
        $separator_orig: separator($list);
        @if has($separator_orig, (space comma)) {
            $separator: $separator_orig;
        }
        @else {
            $separator: space;
        }
    }
    $i: length($list);
    $result: ();
    @while $i > 0 {
        $result: append($result, nth($list, $i), $separator);
        $i: $i - 1;
    }
    @return $result;
}

@mixin smooth-opacity-gradient($color, $length, $both_sides: true, $mirror: false) {
    $steps: ();
    $colors: ();
    @for $i from 0 through $length {
        $steps:append($steps, math.percentage($i/$length));
        $colors:append($colors, color.change($color, $alpha: pow($i, 2)/pow($length, 2)));
    }
    @if $both_sides {
        $steps_first_half: ();
        $other_half: ();
        @for $i from 1 through $length + 1{
            $next_i: $length - $i + 2;
            $new_step: list.nth($steps, $i)/2;
            $steps_first_half:append($steps_first_half, $new_step);
            $other_half:append($other_half, 100 - $new_step);
        }
        $steps: list.join($steps_first_half, reverse($other_half));
        $colors: list.join($colors, reverse($colors));
    }
    @if $mirror {
        $colors:reverse($colors);
    }
    background: linear-gradient(
        zip($colors, $steps)
    );
}

// body {
//     @include smooth-opacity-gradient(red, 5);
// }